# Script: sim_sequences.Rev
# Authors: Sarah K. Swiston (sarah.k.swiston@wustl.edu) & Michael J. Landis
# Date: January 15, 2024

# This script will:
# (1) Call the model.Rev script to construct a FIG model
# (2) Perform inference on a datset under that model
#
# NOTE: Run this script from hawaiian_simulations/

# Script: sim_sequences.Rev
# Authors: Sarah K. Swiston (sarah.k.swiston@wustl.edu)
# Date: January 15, 2024

#################
# Initial Setup #
#################

if (!exists("s_idx")) s_idx = 9       # 9999
if (!exists("exp_path")) exp_path = "./experiment1/"
analysis_type = v("sim","inf")[2]

# load core model
source("scripts/rev_scripts/model.Rev")

# setup
seed(s_idx)

# analysis settings
n_proc <- 4
print_gen <- 10
n_iter <- 5000
under_prior = false
move_schedule = v("single","random")[2]
update_topology = false
analysis = "sim_" + s_idx

################
# Reading Data #
################

# reading tree
tree_fp      = exp_path + "sim_data/sample" + s_idx + ".tre"
phy          = readTrees(file=tree_fp)[1]
#phy.rescale( 15.0 / phy.rootAge() )
tree_height  <- phy.rootAge()
taxa         = phy.taxa()
num_taxa     = taxa.size()
num_branches = 2 * num_taxa - 2

print("num_taxa = ", num_taxa)

# reading molecular data
mol_fp    = exp_path + "sim_data/" + "sample" + s_idx + ".sequences.nex"
dat_mol   = readDiscreteCharacterData(mol_fp)
num_sites = dat_mol.nchar()

# reading range data
bg_fp = exp_path + "sim_data/" + "sample" + s_idx + ".data.tsv"
max_range_size <- 4
num_regions <- 7  # TODO: possibly learn this from regional feature files
#num_states <- floor(2^num_regions - 1)   ### TOO LARGE?
num_states = 0
for (i in 1:max_range_size) num_states += choose(n_regions, i)
dat_nn <- readCharacterDataDelimited( bg_fp,
                                      type="NaturalNumbers",
                                      stateLabels=num_states,
                                      delimiter="\t",
                                      header=false )

dat_nn.show()

##############
# Tree Model #
##############

# tree model
root_age ~ dnUniform(0,30)
root_age.setValue(tree_height)

# expected number of taxa
outgroup_region     <- 7
outgroup_birth_rate <- rho_w * m_w[1][1][outgroup_region]
outgroup_death_rate <- rho_e * m_e[1][1][outgroup_region]
n_expected_outgroup_taxa <- 2 * exp((outgroup_birth_rate - outgroup_death_rate) * tree_height)
rho_outgroup <- Probability(1.0 / n_expected_outgroup_taxa)

# rho sample
for (i in 1:num_states) {
    rho_sample[1][i] <- 1.0
}
rho_sample[1][outgroup_region] <- rho_outgroup
rho_times <- [ 0.0 ]

# root state frequencies
#for (i in 1:num_states) {
#    pi_root_region_vec[i] <- 0.0
#}
#pi_root_region_vec[outgroup_region] <- 1.0
#pi_root_region <- simplex(pi_root_region_vec)

# base frequencies
pi_bg_base <- rep(0, num_states)

if (true) {
    region_available[1] := 1
    region_available[2] := 1
    region_available[3] := ifelse(root_age >  8.000, 0, 1)
    region_available[4] := ifelse(root_age >  6.150, 0, 1)
    region_available[5] := ifelse(root_age >  4.135, 0, 1)
    region_available[6] := ifelse(root_age >  2.550, 0, 1)
    region_available[7] := ifelse(root_age >  1.200, 0, 1)
} else {
    for (i in 1:num_regions) {
        region_available[i] := 1
    }
}

#region2state = [ 22+1, 23+1, 24+1, 25+1, 26+1, 27+1 ]
#r2s_idx = 1

# assume that the integer equal to "num_regions" is the
# range-integer for a species that occurs only in the
# mainland region, for base-indexing of 1 (Rev script).
# For example, region 7 is Mainland US, set the
# range-integer for the range {7} to 1.

pi_allowed_ranges <- [ 6+1, 22+1, 23+1, 24+1, 25+1, 26+1, 27+1 ]
#pi_allowed_ranges <- [ num_regions ]
for (i in 1:pi_allowed_ranges.size()) {
    j = pi_allowed_ranges[i]
    #pi_bg_base[j] <- 1
    pi_bg_base[j] := region_available[i]
}
pi_bg := simplex(pi_bg_base)


# TODO: MAKE SURE TENSORPHYLO IS GETTING THE CORRECT TIMES

# convert RevBayes epoch times (descending order) into Tensorphylo
# epoch times (ascending order) --> have times_fwd[] from model script

num_timeslices = Q.size()
for (i in 1:num_timeslices) {
    j = num_timeslices - i + 1
    lambda_fwd[i] := lambda[j]
    mu_fwd[i] := mu[j]
    Q_fwd[i] := Q[j]
    omega_fwd[i] := omega[j]
}

for (i in 1:(num_timeslices-1)) {
    print("time " + i + " = " + times_fwd[i])
    print(mu[i])
    print("")
}

if (true) {
    rho_e.setValue(0.50)
    rho_w.setValue(0.20)
    rho_b.setValue(1.00)
    rho_d.setValue(0.01)
}
if (false) {
    phi_w[1].setValue(0.25)
    phi_w[2].setValue(0.25)
    phi_e[1].setValue(-0.5)
    phi_e[2].setValue(-0.5)
    phi_d[1].setValue(0.5)
    phi_d[2].setValue(-1.0)
    phi_b[1].setValue(0.0)
    phi_b[2].setValue(2.0)

    sigma_w[1].setValue(0.5)
    sigma_w[2].setValue(0.0)
    sigma_e[1].setValue(-3.0)
    sigma_e[2].setValue(-1.0)
    sigma_d[1].setValue(-3.0)
    sigma_d[2].setValue(0.5)
    sigma_b[1].setValue(2.0)
    sigma_b[2].setValue(0.0)
}

# rho_e.setValue(0.500)
# rho_w.setValue(0.250)
# rho_b.setValue(2.000)
# rho_d.setValue(0.025)
# 
# phi_w[1].setValue(0.25)
# phi_w[2].setValue(0.5)
# phi_e[1].setValue(-0.25)
# phi_e[2].setValue(-0.5)
# phi_d[1].setValue(-1.0)
# phi_d[2].setValue(-0.5)
# phi_b[1].setValue(1)
# phi_b[2].setValue(1)
# 
# sigma_w[1].setValue(1.0)
# sigma_w[2].setValue(-0.5)
# sigma_e[1].setValue(-1.0)
# sigma_e[2].setValue(0.0)
# sigma_d[1].setValue(-1.0)
# sigma_d[2].setValue(0.5)
# sigma_b[1].setValue(1.0)
# sigma_b[2].setValue(0.0)

# set up Tensorphylo SSE model
condition="survival"
timetree ~ dnGLHBDSP( rootAge          = root_age,
                          lambda       = lambda,
                          mu           = mu,
                          eta          = Q,
                          omega        = omega,
                          pi           = pi_bg,
                          lambdaTimes  = times_fwd,
                          muTimes      = times_fwd,
                          etaTimes     = times_fwd,
                          omegaTimes   = times_fwd,
                          rho          = rho_sample,
                          rhoTimes     = rho_times,
                          condition    = condition,
                          taxa         = taxa,
                          nStates      = num_states,
                          nProc        = n_proc )


# molecular model
mu_mol_base ~ dnLoguniform(5e-4, 5e-2)
Q_mol <- fnJC(4)
mu_mol_sd <- 0.587405 
if (exists("mu_mol_branch")) {clear(mu_mol_branch)}
for (j in 1:num_branches) {
    ln_mean := ln(mu_mol_base) - 0.5 * mu_mol_sd * mu_mol_sd
    mu_mol_branch[j] ~ dnLnorm(ln_mean, mu_mol_sd)
}   
seq ~ dnPhyloCTMC(tree=timetree,
                  Q=Q_mol,
                  branchRates=mu_mol_branch,
                  nSites=2000,type="DNA")

# clamping data
timetree.clamp(phy)
timetree.clampCharData(dat_nn)
seq.clamp(dat_mol)

########
# MCMC #
########

# setting up MCMC
print("Compute Tensorphylo model probability...")
timetree.lnProbability()
print("...done!")

# creating moves
print("Creating moves...")
moves = VectorMoves()

# tree variable moves
if (update_topology) {
    moves.append( mvNNI(timetree, weight=num_taxa) )
    moves.append( mvFNPR(timetree, weight=num_taxa/4) )
}
moves.append( mvNodeTimeSlideUniform(timetree, weight=num_taxa*2) )
moves.append( mvScale(root_age, weight=20) )

moves.append( mvScale(rho_d, weight=5) )
moves.append( mvScale(rho_e, weight=5) )
moves.append( mvScale(rho_w, weight=5) )
moves.append( mvScale(rho_b, weight=5) )

for (i in 1:sigma_e.size()) {
    moves.append( mvScale(sigma_e[i], weight=2) )
    moves.append( mvScale(sigma_w[i], weight=2) )
    moves.append( mvSlide(sigma_e[i], weight=2) )
    moves.append( mvSlide(sigma_w[i], weight=2) )
    if (use_rj) {
        moves.append( mvRJSwitch(sigma_e[i], weight=3) )
        moves.append( mvRJSwitch(sigma_w[i], weight=3) )
        use_sigma_e[i] := ifelse(sigma_e[i] == 0.0, 0, 1)
        use_sigma_w[i] := ifelse(sigma_w[i] == 0.0, 0, 1)
    }
}
for (i in 1:sigma_d.size()) {
    moves.append( mvScale(sigma_d[i], weight=2) )
    moves.append( mvScale(sigma_b[i], weight=2) )
    moves.append( mvSlide(sigma_d[i], weight=2) )
    moves.append( mvSlide(sigma_b[i], weight=2) )
    if (use_rj) {
        moves.append( mvRJSwitch(sigma_d[i], weight=3) )
        moves.append( mvRJSwitch(sigma_b[i], weight=3) )
        use_sigma_d[i] := ifelse(sigma_d[i] == 0.0, 0, 1)
        use_sigma_b[i] := ifelse(sigma_b[i] == 0.0, 0, 1)
    }
}
for (i in 1:phi_e.size()) {
    moves.append( mvScale(phi_e[i], weight=2) )
    moves.append( mvScale(phi_w[i], weight=2) )
    moves.append( mvSlide(phi_e[i], weight=2) )
    moves.append( mvSlide(phi_w[i], weight=2) )
    if (use_rj) {
        moves.append( mvRJSwitch(phi_e[i], weight=3) )
        moves.append( mvRJSwitch(phi_w[i], weight=3) )
        use_phi_e[i] := ifelse(phi_e[i] == 0.0, 0, 1)
        use_phi_w[i] := ifelse(phi_w[i] == 0.0, 0, 1)
    }
}
for (i in 1:phi_d.size()) {
    moves.append( mvScale(phi_d[i], weight=2) )
    moves.append( mvScale(phi_b[i], weight=2) )
    moves.append( mvSlide(phi_d[i], weight=2) )
    moves.append( mvSlide(phi_b[i], weight=2) )   
    if (use_rj) {
        moves.append( mvRJSwitch(phi_d[i], weight=3) )
        moves.append( mvRJSwitch(phi_b[i], weight=3) )
        use_phi_d[i] := ifelse(phi_d[i] == 0.0, 0, 1)
        use_phi_b[i] := ifelse(phi_b[i] == 0.0, 0, 1)
    }
}

# molecular moves
# base rate of molecular substitution
moves.append(mvScale(mu_mol_base, weight=20) )

# branch rates of molecular substitution, centered on mu_mol_base
for (i in 1:num_branches) {
    moves.append(mvScale(mu_mol_branch[i], weight=3))
}

#for (i in 1:num_loci) {
#    if (i >= 2) {
#        moves.append(mvScale(mu_mol_locus_rel[i], weight=3))
#    }
#    moves.append(mvScale(kappa[i], weight=3))
#    moves.append(mvScale(alpha[i], weight=3))
#    moves.append(mvSimplex(pi_mol[i], alpha=3, offset=0.5, weight=3))
#}

# joint moves
up_down_scale_tree = mvUpDownScale(lambda=1.0, weight=20)
up_down_scale_tree.addVariable(timetree,      up=true)
up_down_scale_tree.addVariable(root_age,      up=true)
up_down_scale_tree.addVariable(mu_mol_branch, up=false)
up_down_scale_tree.addVariable(mu_mol_base,   up=false)
moves.append(up_down_scale_tree)

up_down_mol_rate = mvUpDownScale(lambda=1.0, weight=20)
up_down_mol_rate.addVariable(mu_mol_branch, up=true)
up_down_mol_rate.addVariable(mu_mol_base,   up=true)
moves.append(up_down_mol_rate)

# MJL: this seems to cause a bug, working to fix w/ Mike May
rate_age_proposal = mvRateAgeProposal(timetree, weight=20, alpha=5)
rate_age_proposal.addRates(mu_mol_branch)
moves.append(rate_age_proposal)

# creating monitors
#print("Creating monitors...")
# create monitor vector
monitors = VectorMonitors()
# screen monitor, so you don't get bored
monitors.append( mnScreen(root_age, printgen=print_gen) )
# file monitor for all simple model variables
monitors.append( mnModel(printgen=print_gen, file="output/" + analysis + ".model.txt") )
# file monitor for tree
monitors.append( mnFile(timetree, printgen=print_gen, file="output/" + analysis + ".tre") )
# file monitor for molecular model
monitors.append( mnFile(mu_mol_base, mu_mol_branch, root_age, printgen=print_gen, file="output/" + analysis + ".mol.txt") )
# file monitor for biogeographic model
#for (k in 1:num_times) {
#    bg_mon_filename = "output/" + analysis + ".time" + k + ".bg.txt"
#    monitors.append( mnFile(filename = bg_mon_filename,printgen=print_gen,rho_e, rho_w, rho_d, rho_b, r_e[k], r_w[k], r_d[k][1], r_d[k][2], r_d[k][3], r_d[k][4], r_d[k][5], r_d[k][6], r_b[k][1], r_b[k][2], r_b[k][3], r_b[k][4], r_b[k][5], r_b[k][6], m_e[k][1], m_w[k][1], m_d[k][1], m_d[k][2], m_d[k][3], m_d[k][4], m_d[k][5], m_d[k][6], m_b[k][1], m_b[k][2], m_b[k][3], m_b[k][4], m_b[k][5], m_b[k][6]))
#}

# ancestral estimates
#monitors.append( mnJointConditionalAncestralState(tree=timetree, glhbdsp=timetree, printgen=print_gen*stoch_print_gen, filename="output/" + analysis + ".states.txt", withTips=true, withStartStates=true, type="NaturalNumbers") ) 

#monitors.append( mnStochasticCharacterMap(glhbdsp=timetree, printgen=print_gen*10, filename="output/" + analysis + ".stoch.txt", use_simmap_default=false) )
# report any other summary statistics

# create model object
print("Creating model...")
mymodel = model(timetree)

# create MCMC object
print("Creating MCMC...")
mymcmc = mcmc(mymodel, moves, monitors, moveschedule=move_schedule)
mymcmc.operatorSummary()

# run MCMC
print("Running MCMC...")
mymcmc.run(n_iter, underPrior=under_prior)

# done!
quit()
