tree = readTrees(text=test_tree)
tree = readTrees(text="((((((nd32:5.008982785070683,nd33:2.628256420388084)nd18:4.334782403553822,nd19:6.248553886509592)nd14:0.3867926281286937,(((nd34:3.8711597227837453,((nd44:0.46896426186304385,nd45:0.46896426186304385)nd38:1.95270345930271,nd39:2.421667721165753)nd35:1.449492001617991)nd28:1.6821552898940502,nd29:5.553315012677792)nd16:4.153379035639212,(nd22:6.360025806372557,(nd36:3.6515109265610173,nd37:3.6515109265610173)nd23:2.708514879811547)nd17:3.3466682419444442)nd15:0.023863768436195833)nd10:2.8940109306740824,nd11:12.624568747427302)nd4:0.7331895623947295,(((nd26:5.718061236033518,nd27:0.057517057373696855)nd12:6.7587604298852915,((nd40:1.4559154676205677,nd41:1.4559154676205677)nd20:7.829417199263035,(nd42:0.9539072314715487,nd43:0.9539072314715487)nd21:8.33142543541205)nd13:3.191488999035209)nd8:0.26921150878294964,(nd24:3.4925447378173646,nd25:0.9114230881212373)nd9:6.751104023501176)nd5:0.6117251351202531)nd1:0.46654169017797187,(nd6:10.260736583498366,(nd30:0.0006449747235464282,nd31:0.6459875515560398)nd7:7.571514270628166)nd2:0.8879343016725598)root;")
q()
pj_path = "../../experiment1/pj_output/"
model_path = "../../experiment1/model_truth/"
out_path = "../../experiment1/sim_data/"
colonization_fp = model_path + "colonization_true_vals.tsv"
colonization_times = readDataDelimitedFile(colonization_fp,sep="",header=TRUE)
i = 1
    file = pj_path + "sample" + i + "_trs_complete.tsv"
tree_str = readDataDelimitedFile(file,sep="",header=TRUE)[1][3]
file = pj_path + "sample" + i + "_trs_complete.tsv"
tree_str = readDataDelimitedFile(file,sep="",header=TRUE)[1][3]
i = 9
file = pj_path + "sample" + i + "_trs_complete.tsv"
tree_str = readDataDelimitedFile(file,sep="",header=TRUE)[1][3]
ingroup_age = colonization_times[i][3]
root_age = colonization_times[i][2]
ingroup_branch_length = root_age - ingroup_age
tip_fp = pj_path + "sample" + i + "_trs_sample1_repl1.tsv"
tip_data = readDataDelimitedFile(tip_fp,sep="")
for (j in 1:tip_data.size()) {
            new_data[j][1] = tip_data[j][1]
            new_data[j][2] = tip_data[j][2]
        }
new_data[tip_data.size()+1][1] = "outgroup"
new_data[tip_data.size()+1][2] = 5
data_fp = out_path + "sample" + i + ".data.tsv"
write(new_data,filename=data_fp,sep="\\t")
for (i in 1:new_data.size()) {
            taxa[i] = taxon(new_data[i][1])
        }
tmp_fp = out_path + "tmp.tre"
write(tree_str, file=tmp_fp)
tree = readTrees(file=tmp_fp)[1]
out_path = "../../experiment1/sim_data/"
tmp_fp = out_path + "tmp.tre"
tree = readTrees(file=tmp_fp)[1]
tree = readTrees(file="../../experiment1/sim_data/tmp.tre")
q()
phy
phy.methods
()
phy.nnodes()
phy.ntips()
phy.taxa()
q()
phy
q()
taxa.methods()
q()
str = "(((nd4:0.38974664300081596,nd5:1.39915771130137)nd2:2.4813066030667854,(nd6:3.587606853661028,((((nd16:0.8983797590992337,((((nd40:8.9283248406623,nd41:7.712542401315508)nd36:0.6765612735980607,nd37:4.2833029293182765)nd26:1.1952997701903347,(((nd112:1.8271647583902244,(nd132:1.5768812408034596,(nd174:0.2688008206120563,nd175:0.2688008206120563)nd133:1.308080420191403)nd113:2.1350658710092585)nd54:3.5234553414166028,(nd72:0.1867701447443108,nd73:5.673632980867725)nd55:1.5617694723616002)nd28:3.274662940489508,nd29:1.1302761516926183)nd27:0.29012049073186597)nd24:1.254683986672993,(((nd58:3.6308637288149406,((nd116:2.9815091772298725,nd117:2.2961035808132317)nd66:2.7392276951306527,(nd80:0.26130577979699765,((nd180:0.05070791953585456,nd181:0.05070791953585456)nd118:2.672998982916345,((((nd160:0.7330101204647198,nd161:0.8301402834624592)nd156:0.1846698218341864,nd157:1.0148101052966456)nd146:0.14410060837228442,nd147:1.1589107136689303)nd136:0.32092875655571107,((nd182:0.011313958561036348,nd183:0.011313958561036348)nd168:0.5899421169312408,nd169:0.6012560754922771)nd137:0.878583394732364)nd119:1.2438674322275594)nd81:2.571250424115651)nd67:0.42577954579267324)nd59:1.0868924144013827)nd42:1.1168928453766584,((nd138:0.38058004188873346,nd139:1.3789204349034434)nd78:3.9972395068537327,(nd94:4.5201873539211705,nd95:4.5201873539211705)nd79:0.8559725878360075)nd43:2.548362190381391)nd30:2.0672665376226638,(nd32:2.7161797263245013,((((nd122:2.1893861631545706,nd123:2.1893861631545706)nd98:2.185974329339688,nd99:0.6075044337833313)nd88:0.5439172292237643,nd89:4.919277721718027)nd34:5.054390687653571,((nd50:1.2085482984694846,(nd60:2.851201378017852,(((nd90:4.807626182057579,(((nd110:2.9666310038210875,nd111:3.7942428784450652)nd104:0.20773215290712416,nd105:4.001975031352189)nd100:0.326128023638667,nd101:3.372400044422956)nd91:0.47952312706671835)nd74:0.8138194591516532,nd75:5.621445641209232)nd68:0.06328687001109673,(nd76:5.5306647253615635,(((nd106:3.8904424072344663,(nd108:0.30785755073304916,nd109:0.14566054833151976)nd107:0.0026471680434814607)nd102:0.38162850538995235,nd103:0.4013025024270569)nd84:0.8488027204358369,(nd162:0.8194951388996635,nd163:0.8194951388996635)nd85:4.308039856555919)nd77:0.4031297299059785)nd69:0.15406778585876435)nd61:0.4249740530087932)nd51:1.6129151552766343)nd48:0.03846693669953297,nd49:0.929511203739326)nd35:2.2125797531663096)nd33:0.013739888768576347)nd31:0.004380371621059512)nd25:2.0630812013624578)nd17:2.133278992638662)nd14:1.4904107476521191,nd15:0.03914573005627385)nd10:5.128748302331301,nd11:0.9482541802451216)nd8:0.008294343566542108,(nd12:0.7887012369364509,((nd22:1.024226615048787,(nd154:1.021368226764394,(nd158:0.9181338434963212,(nd184:0.008744185109734287,nd185:0.008744185109734287)nd159:0.9093896583865869)nd155:0.10323438326807244)nd23:11.36630018688067)nd18:1.5043103310993462,(((nd56:7.078566367752127,((((nd172:0.31132257603695473,nd173:0.31132257603695473)nd114:3.2075777674585364,nd115:3.518900343495491)nd64:2.3073408654218808,nd65:0.10977796670446424)nd62:0.14789136037446735,(nd82:2.6180979435555938,(((nd130:1.5865852656198496,((nd178:0.11181218177390444,nd179:0.11181218177390444)nd150:0.9605953538996389,(nd170:0.32560757289777725,nd171:0.32560757289777725)nd151:0.7467999627757661)nd131:0.5141777299463061)nd128:0.2734657235304529,nd129:1.860050989150302)nd126:0.08911483929371435,nd127:1.0577261198530759)nd83:3.286907875641479)nd63:0.7380588652063438)nd57:1.1044337984602848)nd46:0.7425645659872313,(nd124:2.029178570432178,nd125:2.029178570432178)nd47:5.791952363307177)nd20:5.786768067865093,(((nd92:0.49338093508211356,((nd176:0.230083372527615,nd177:0.230083372527615)nd134:1.2755693463406528,(nd140:0.3343878849336892,nd141:1.3590633026580785)nd135:0.14658941621018973)nd93:3.2063470309988626)nd44:3.1463005338036023,(((nd96:4.425732924328185,((nd152:1.0263828974800309,(nd164:0.7251978383362387,nd165:0.7251978383362387)nd153:0.30118505914379184)nd120:1.6942009652389025,(nd148:0.021833140384478325,nd149:1.154516619990461)nd121:1.5660672427284725)nd97:1.7051490616092486)nd70
str
root_age = 10
str = "(outgroup:" + root_age + "," + str.substr(2,str.size())
str
str = readDataDelimitedFile(file,sep="",header=TRUE)[1][3]
str
root_age = colonization_times[i][2]
colonization_age = colonization_times[i][3]
speciation_branch_length = str.substr(str.indexOf("root")+5,str.indexOf("origin")-2)
ingroup_branch_length = (root_age - colonization_age) + speciation_branch_length
str = "(outgroup:" + root_age + "," + str.substr(2,str.size())
str = str.substr(1,str.indexOf("root")-1) + "sub" + str.substr(str.indexOf("root"),str.size())
str = str.substr(1,str.indexOf("origin")-1) + "root;"
str
tip_fp = pj_path + "sample" + i + "_trs_sample1_repl1.tsv"
        tip_data = readDataDelimitedFile(tip_fp,sep="")
        if (exists("new_data")) {clear(new_data)}
        for (j in 1:tip_data.size()) {
            new_data[j][1] = tip_data[j][1]
            new_data[j][2] = tip_data[j][2]
        }
        new_data[tip_data.size()+1][1] = "outgroup"
        new_data[tip_data.size()+1][2] = 5
data_fp = out_path + "sample" + i + ".data.tsv"
        write(new_data,filename=data_fp,sep="\\t")
for (j in 1:new_data.size()) {
            taxa[j] = taxon(new_data[j][1])
        }
tmp_fp = out_path + "tmp.tre"
        write(str, file=tmp_fp)
        tree = readTrees(file=tmp_fp)[1]
        phy = fnPruneTree(tree, retain=taxa)
phy
q()
phy
q()
phy
q()
phy
str
str.indexOf("root")
str.indexOf("origin")
q()
sizes.methods()
q()
rho_d.methods()
q()
