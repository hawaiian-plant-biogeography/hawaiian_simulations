# Script: sim_sequences.Rev
# Authors: Sarah K. Swiston (sarah.k.swiston@wustl.edu)
# Date: January 15, 2024

# This script will:
# (1) Read in a simulation generated by PhyloJunction
# (2) Graft on an outgroup with the appropriate tip state
# (3) Simulate sequences for the whole tree
#
# NOTE: Run this script from hawaiian_simulations/

#################
# Initial Setup #
#################

if (!exists("i")) i = 2 #9999
if (!exists("exp_path")) exp_path = "experiment1/"
if (!exists("continent_region_idx")) continent_region_idx = 7

pj_path = exp_path + "pj_output/"
model_path = exp_path + "model_truth/"
out_path = exp_path + "sim_data/"

###################
# Adding Outgroup #
###################

file = pj_path + "sample" + i + "_trs_complete2.tsv"
print(file)
if (fileExists(file)) {
    print("Working on simulation " + i)

    # Read the tree from pj_output
    str = readDataDelimitedFile(file,sep="",header=TRUE)[1][3]
    #phy = readTrees(text=str, treetype="clock")

    # Read the root age from model_truth
    colonization_fp = model_path + "colonization_true_vals_sample" + i + ".tsv"
    colonization_times = readDataDelimitedFile(colonization_fp,sep="",header=TRUE)
    root_age = colonization_times[1][2]
    colonization_age = colonization_times[1][3]

    # origin time
    origin_time = str.substr(str.indexOf("root") + 5, str.indexOf("origin") - 2)
    position = origin_time.indexOf(".")
    origin_time = origin_time.substr(1,position-1) + origin_time.substr(position+1,origin_time.size())
    print(origin_time)
    origin_time_length = origin_time.size()
    print(origin_time_length)
    if (origin_time_length > 9) {
        origin_time = origin_time.substr(1,9)
        origin_time_length = 9
    }
    origin_time = int(origin_time)
    origin_time = origin_time / (10^origin_time_length) * 10^(position-1)

    # ingroup branch length
    ingroup_branch = root_age - colonization_age + origin_time
    print("root age " + root_age + " colonization age " + colonization_age + " origin time " + origin_time + " ingroup branch " + ingroup_branch)

    print("Got root and colonization ages")

    # Graft on outgroup to the tree
    print(str)
    str = "(outgroup:" + root_age + "," + str.substr(2,str.size())
    print(str)
    str = str.substr(1,str.indexOf("root")-1) + "sub" + str.substr(str.indexOf("root"),str.size())
    str = str.substr(1,str.indexOf("subroot")+7) + ingroup_branch + str.substr(str.indexOf("origin")-1,str.size())
    str = str.substr(1,str.indexOf("origin")-1) + "root;"
    print("Grafted outgroup onto tree")

    # Graft on the outgroup to the tip data
    tip_fp = pj_path + "sample" + i + "_trs_sample1_repl1.tsv"
    tip_data = readDataDelimitedFile(tip_fp,sep="")
    if (exists("new_data")) {clear(new_data)}
    for (j in 1:tip_data.size()) {
        new_data[j][1] = tip_data[j][1]
        new_data[j][2] = tip_data[j][2]
    }
    new_data[tip_data.size()+1][1] = "outgroup"
    new_data[tip_data.size()+1][2] = continent_region_idx
    print("Grafted outgroup onto tip data")

    # Save the new tip data in sim_data
    data_fp = out_path + "sample" + i + ".data.tsv"
    write("",filename=data_fp,sep="\t")
    for (j in 1:(tip_data.size()+1)) {
        dat_str <- new_data[j][1] + "\t" + new_data[j][2] + "\n"
        write(dat_str,filename=data_fp,append=TRUE)
    }

    # Get the set of taxa to retain in the final tree
    for (j in 1:new_data.size()) {
        taxa[j] = taxon(new_data[j][1])
    }

    # Remove all extinct taxa from the tree
    tree_fp = out_path + "sample" + i + ".tre"
    write(str, file=tree_fp)
    tree = readTrees(file=tree_fp)[1]
    phy = fnPruneTree(tree, retain=taxa)
    write(phy,filename=tree_fp)
    print("Removed extinct taxa and saved new tree")

########################
# Simulating Sequences #
########################

    # Simulate sequences over the full tree
    # molecular model
    mu_mol_base ~ dnLoguniform(5e-4, 5e-2)
    mol_fp = out_path + "sample" + i + ".mol.tsv"
    write(mu_mol_base,filename=mol_fp,sep="\t")

    # Jukes-Cantor matrix
    Q <- fnJC(4)
    
    # branch rate variation
    mu_mol_sd <- 0.587405 
    
    # relative among branch rate variation
    num_branches = 2 * phy.ntips() - 2
    if (exists("mu_mol_branch")) {clear(mu_mol_branch)}
    for (j in 1:num_branches) {
        ln_mean := ln(mu_mol_base) - 0.5 * mu_mol_sd * mu_mol_sd
        mu_mol_branch[j] ~ dnLnorm(ln_mean, mu_mol_sd)
    }
    branch_fp = out_path + "sample" + i + ".branches.tsv"
    write(mu_mol_branch,filename=branch_fp,sep="\t")    

    # Sequence model
    seq ~ dnPhyloCTMC(tree=phy,Q=Q,branchRates=mu_mol_branch,nSites=2000,type="DNA")

    # Save the sequence data in sim_data
    seq_fp = out_path + "sample" + i + ".sequences.nex"
    writeNexus(seq_fp,seq)
    print("Simulated sequences")
}

q()

