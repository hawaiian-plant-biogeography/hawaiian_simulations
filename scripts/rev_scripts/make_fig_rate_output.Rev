# Script: make_fig_make_geosse_rates_unif_coltime.Rev
# Authors: Fabio K. Mendes (f.mendes@wustl.edu) & Sarah K. Swiston (sarah.k.swiston@wustl.edu)
# Date: February 2, 2024

# This script will:
# (1) Call the model.Rev script to generate the FIG model
# (2) Simulate an island colonization event
# (3) Write GeoSSE rates to geosse_rates_for_pj_scripts/
#
# The rates written in (3) will then be processed by a .py script that creates the .pj
# scripts. Originally the .pj scripts were built and written by RevBayes, but that was
# taking way too long.
#
# NOTE: Run this script from hawaiian_simulations/

#################
# Initial setup #
#################

analysis_type = v("sim","inf")[1]
source("scripts/rev_scripts/model.Rev")

# simulation config
# n_samples = 100

# setting a unique seed for each simulation (makes replication possible)
print("Setting seed to " + s_idx)
seed(s_idx)

####################################
# GENERATING SIMULATION PARAMETERS #
####################################

sigma_true_vals_s = "sample\tfeature\tsigma_d\tsigma_e\tsigma_w\tsigma_b\n"
phi_true_vals_s = "sample\tfeature\tphi_d\tphi_e\tphi_w\tphi_b\n"
rho_true_vals_s = "sample\trho_d\trho_e\trho_w\trho_b\n"
colonization_true_vals_s = "sample\ttree_age\tcolonization_age\tsubroot_range\n"

#valid = false
#while (!valid) {
#

# MJL: This code assumes all processes have same numbers of features as dispersal.
#      In our empirical case, that means we only consider the FIRST feature layer
#      because there is only one CB and one QB layer each.

rho_e.setValue(0.500)
rho_w.setValue(0.250)
rho_b.setValue(2.000)
rho_d.setValue(0.025)

phi_w[1].setValue(0.25)
phi_w[2].setValue(0.5)
phi_e[1].setValue(-0.25)
phi_e[2].setValue(-0.5)
phi_d[1].setValue(-1.0)
phi_d[2].setValue(-0.5)
phi_b[1].setValue(1)
phi_b[2].setValue(1)

sigma_w[1].setValue(1.0)
sigma_w[2].setValue(-0.5)
sigma_e[1].setValue(-1.0)
sigma_e[2].setValue(0.0)
sigma_d[1].setValue(-1.0)
sigma_d[2].setValue(0.5)
sigma_b[1].setValue(1.0)
sigma_b[2].setValue(0.0)

feat_specific_sigma_true_vals_s = "sample\tsigma_d\tsigma_e\tsigma_w\tsigma_b\n"
for (c_feat_idx in 1:sigma_d.size()) {
    sigma_true_vals_s += s_idx + "\t" + c_feat_idx + "\t" + sigma_d[c_feat_idx] + "\t" + sigma_e[c_feat_idx] + "\t" + sigma_w[c_feat_idx] + "\t" + sigma_b[c_feat_idx] + "\n"

    feat_specific_sigma_true_values_path = model_truth_dir + "sigma_true_vals_sample" + s_idx + "_feat" + c_feat_idx + ".tsv"
    feat_specific_sigma_true_vals_s += s_idx + "\t" + sigma_d[c_feat_idx] + "\t" + sigma_e[c_feat_idx] + "\t" + sigma_w[c_feat_idx] + "\t" + sigma_b[c_feat_idx] + "\n"

    print("Writing true feature effect values for categorical feature " + c_feat_idx + " in " + feat_specific_sigma_true_values_path)
    write(feat_specific_sigma_true_vals_s, file=feat_specific_sigma_true_values_path)
}

feat_specific_phi_true_vals_s = "sample\tphi_d\tphi_e\tphi_w\tphi_b\n"
for (q_feat_idx in 1:phi_d.size()) {
    phi_true_vals_s += s_idx + "\t" + q_feat_idx + "\t" + phi_d[q_feat_idx] + "\t" + phi_e[q_feat_idx] + "\t" + phi_w[q_feat_idx] + "\t" + phi_b[q_feat_idx] + "\n"

    feat_specific_phi_true_values_path = model_truth_dir + "phi_true_vals_sample" + s_idx + "_feat" + q_feat_idx + ".tsv"
    feat_specific_phi_true_vals_s += s_idx + "\t" + phi_d[q_feat_idx] + "\t" + phi_e[q_feat_idx] + "\t" + phi_w[q_feat_idx] + "\t" + phi_b[q_feat_idx] + "\n"

    print("Writing true feature effect values for quantitative feature " + q_feat_idx + " in " + feat_specific_phi_true_values_path)
    write(feat_specific_phi_true_vals_s, file=feat_specific_phi_true_values_path)
}


"\nrelative wr-speciation rates:"
m_w

"\nrelative extinction rates:"
m_e

"\nabsolute wr-speciation rates:"
r_w

"\nabsolute exinction rates:"
r_e


#rho_d.redraw()
#rho_e.redraw()
#rho_w.redraw()
#rho_b.redraw()

rho_true_vals_s += s_idx + "\t" + rho_d + "\t" + rho_e + "\t" + rho_w + "\t" + rho_b + "\n"

sample_rho_true_values_path = model_truth_dir + "rho_true_vals_sample" + s_idx + ".tsv"
sample_rho_true_vals_s = "sample\trho_d\trho_e\trho_w\trho_b\n" + s_idx + "\t" + rho_d + "\t" + rho_e + "\t" + rho_w + "\t" + rho_b + "\n"

print("Writing true base rate values for sample " + s_idx + " in " + sample_rho_true_values_path)
write(sample_rho_true_vals_s, file=sample_rho_true_values_path)

#################################
# SIMULATING COLONIZATION EVENT #
#################################

# origin (seed) age
or_age = -1.0

# G, N, K, O, M, H, Z
# NOTE: base-index 1 for RevBayes arrays
#       base-index 0 for RevBayes states in nex file
non_continent_region_idxs = [1, 2, 3, 4, 5, 6]
continent_region_idx = max(non_continent_region_idxs) + 1


# Information about high islands



# 22, 1000001, G+Z
# 23, 0100001, N+Z
# 24, 0010001, K+Z
# 25, 0001001, O+Z
# 26, 0000101, M+Z
# 27, 0000011, H+Z
translation_table = [0, 1, 2, 3, 4, 5]
island_names = ["Gardener", "Necker", "Kauai", "Oahu", "Maui-Nui complex", "Hawaii"]

# decreasing ages
# times: breakpoints

# origination age of *lineage* within islands
# i.e. first colonization time
island_ori_age ~ dnUnif(0, 20)
island_ori_age.redraw()

# draw root age for the whole tree
# this is the age of the MRCA that separates
# the ingroup (stem) and the outgroup
whole_tree_age ~ dnUnif(island_ori_age,30)
whole_tree_age.redraw()

# old -> young
time_ends <- times
time_ends[n_epochs] <- 0
for (t in 1:n_epochs) {

    # find the epoch corresponding to island_ori_age
    if (t < n_epochs && (island_ori_age < time_ends[t])) {
        next
    } else {

        # event happened within interval t
        island_rates = rep(0.0, non_continent_region_idxs.size())
        print(t, time_ends[t])

        # high island status
        is_high_island = feature_CW[t][1].get()
        print(is_high_island)
        
        # getting relative rates for colonizing each possible *HIGH* island
        for (i in non_continent_region_idxs) {
            island_rates[i] = abs( r_d[t][continent_region_idx][i] * ifelse( is_high_island[1][i] == 1, 1, 0) )
        }
        islands_relative_rates <- simplex(island_rates)
        print(islands_relative_rates)

        print("speciation rates = ", rho_w * m_w[t][1])
        print("extinction rates = ", rho_e * m_e[t][1])

        # starting region (island), between 1 and 6
        island_subroot_idx ~ dnCat(islands_relative_rates)
        island_subroot_idx.redraw()

        # note that we have to add the island to the continent
        # and find that widespread range integer ID
        subroot_range = translation_table[island_subroot_idx]
        colonized_island_name = island_names[island_subroot_idx]
       
        # found time interval, break out of loop
        break
    }
}
print("\nWhole tree root age = " + whole_tree_age)
print("Origin age of island radiation = " + island_ori_age)
print("Island that got colonized = " + colonized_island_name)

# save the colonization information to a file
colonization_true_vals_s += s_idx + "\t" + whole_tree_age + "\t" + island_ori_age + "\t" + subroot_range + "\n"
sample_colonization_true_values_path = model_truth_dir + "colonization_true_vals_sample" + s_idx + ".tsv"
sample_colonization_true_vals_s = "sample\ttree_age\tcolonization_age\tsubroot_range\tcolonized_island_name\n" + s_idx + "\t" + whole_tree_age + "\t" + island_ori_age + "\t" + subroot_range + "\t" + colonized_island_name + "\n"
# print("Writing true colonization times for sample " + s_idx + " in " + sample_colonization_true_values_path)
write(sample_colonization_true_vals_s, file=sample_colonization_true_values_path)

########################
# WRITING GeoSSE RATES #
########################

geosse_rates_idx_mu_path = geosse_rates_dir + "mu" + s_idx + ".txt"
geosse_rates_idx_trans_path = geosse_rates_dir + "trans" + s_idx + ".txt"
geosse_rates_idx_clado_path = geosse_rates_dir + "clado" + s_idx + ".txt"

write(r_e, file=geosse_rates_idx_mu_path)
write(Q, file=geosse_rates_idx_trans_path)
write(clado_map, file=geosse_rates_idx_clado_path)


########################
# DONE                 #
########################

quit()

